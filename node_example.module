<?php

/**
 * @file
 * This is an example outlining how a module can be used to define a new
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node types will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database tabel as
 * defined in node_example_schema() in the node_example.install file.
 */

/**
 * @defgroup node_example Example: Node
 * @ingroup examples
 * @{
 * Creating a new content type in a module. (drupal6)
 *
 * This is an example outlining how a module can be used to define a new
 * node type.
 *
 * (Note that custom node types are most often created with CCK in recent
 * versions of Drupal.)
 *
 * Our example node types will allow users to specify a "color" and a "quantity"
 * for their nodes; some kind of rudimentary inventory-tracking system, perhaps?
 * To store this extra information, we need an auxiliary database tabel as
 * defined in node_example_schema() in the node_example.install file.
 *
 * This exmple is pare of the Examples for Developers Project which you can download
 * and experiment with here: http://drupal.org/project/examples
 */

 /**
  * Implements hook_menu().
  */
function node_example_menu() {
  $items['examples/node_example'] = array(
    'title'           => 'Node Example',
    'page callback'   => 'node_example_info',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback for path 'examples/node_example'
 */
function node_example_info() {
  return t('The node example defines a new node type, "Example node type 1"'
         . 'which can be created at !link.',
         array('!link' => l(t('node/add/example-node-type-1'),
               'node/add/example-node-type-1'))
          );
}

/**
 * Implements hook_node_info()
 *
 * This is a required node hook. This function describes the nodes provided by
 * this module.
 *
 * The required attributes are:
 * - "name" provides a human readable name for the node,
 * - "module" tells Drupal how the module's functions map to hooks (i.e., if the
 *   module is node_example_foo, then node_example_foo_insert will be called
 *   when inserting the node).
 * - "description" provides a brief description of the node type, which is
 *   shown when a user accesses the "Create content" page for that node type.
 *
 * The other, optional, attributes:
 * - "has_title" boolean that indicates whether or not this node type has a
 *   title field.
 * - "title_label" is the label for the title field of this content type.
 * - "has_body" boolean that indicates whether or not this node type has a
 *   body field.
 * - "body_label: the label fo rthe body field of this content type.
 * - "min_word_count": the minimum number of words for the body field to be
 *   considered valid for this content type.
 *
 * They array key in this example, "example_node_type_1", is the machine name of the
 * node type and is stored in the {node}.type.  The node's type value cannot be
 * changed through the admin interface.
 */
function node_example_node_info() {
  return array(
    'example_node_type_1' => array(
      'name'       => t('Example node type 1'),
      'module'     => 'node_example',
      'description'=> t('An example node type with a few fields.'),
      'has_title'  => TRUE,
      'title_label'=> t('Example Node Type 1 Title'),
      'has_body'   => TRUE,
      'body_label' => t('Example Node Type 1 Body'),
    ),
  );
}

/**
 * Implements hook_access().
 *
 * Node modules may implement node_access() to determine the operations
 * users may perform on nodes. This example uses a very common access pattern.
 */
function node_example_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create example content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any example content', $account) || (user_access('edit own example content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any example content', $account) || (user_access('delete own example content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_perm().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a permission
 * to allow users to edit the nodes they created.
 */
function node_example_perm() {
  return array(
    'create example content',
    'delete own example content',
    'delete any example content',
    'edit own example content',
    'edit any example content',
  );
}

/**
 * Implements hook_form().
 *
 * Now it's time to describe the form for collecting the information
 * specific to this node type. This hook requires us to return an array
 * with a subarray containing information for each element in the form.
 *
 * After adding this, you get a complete form with Body, Color, and Quantity
 * fields at 'node/add/example-node-type-1' or 'node/41/edit'.
 *
 */
function node_example_form(&$node, $form_state) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // buidl the node form correctly.
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type'          => 'textfield',
      '#title'         => check_plain($type->title_label),
      '#required'      => TRUE,
      '#default_value' => $node->title,
      '#weight'        => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we use node_body_field() to get the body and filter
    // elements. This replaces the old textares + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  // Now we define the form elements specific to our node type.
  $form['color'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Color'),
    '#default_value' => isset($node->color) ? $node->color : '',
  );
  $form['quantity'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Quantity'),
    '#default_value' => isset($node->quantity) ? $node->quantity : 0,
    '#size'          => 10,
    '#maxlength'     => 10,
  );

  return $form;
}

/**
 * Implements hook_validate().
 *
 * Our "quantity" field requires a number to be entered. This hook lets
 * us ensure that the user entered an appropriate value before we try
 * inserting anything into the database.
 *
 * Errors should be signaled with form_set_error().
 */
function node_example_validate($node, &$form) {
  if ($node->quantity) {
    if (!is_numeric($node->quantity)) {
      form_set_error('quantity', t('The quantity must be a number.'));
    }
  }
}

/**
 * Implements hook_insert().
 *
 * As a new node is inserted into the database, we need to do our own
 * database inserts of our custom fields.
 */
function node_example_insert($node) {
  db_query("INSERT INTO {node_example} (vid, nid, color, quantity) VALUES (%d, %d, '%s', %d)", $node->vid, $node->nid, $node->color, $node->quantity);
}

/**
 * Implements hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates in our custom table.
 */
function node_example_update($node) {
  // If this is a new node or we're adding a new revision...
  if ($node->revision) {
    node_example_insert($node);
  }
  else {
    db_query("UPDATE {node_example} SET color = '%s', quantity = %d WHERE vid = %d",
             $node->color, $node->quantity, $node->vid);
  }
}

/**
 * Implements hook_nodeapi().
 *
 * When a node REVISION is deleted, we need to remove the corresponding record
 * from our table. Then only way to handle revision deletion is by implementing
 * hook_nodeapi().
 * You can observe this working by adding new revisions of type node_example
 * and observing the node_example and node_revisions tables.
 */
function node_example_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      // Notice that we're matching a single revision based on the node's vid.
      db_query('DELETE FROM {node_example} WHERE vid = %d', $node->vid);
      break;
  }
}

/**
 * Implements hook_delete().
 * When a node is deleted, we need to remove all related records from our table.
 */
function node_example_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_query('DELETE FROM {node_example} WHERE nid = %d', $node->nid);
}



